import requests
import time
import xmltodict
import os

baseurl = 'http://localhost:32400'
token = 'EDLzhCqbEjXvwQuziiCz'
tarProgress = 0.9 # 90% 이상 시청
intervalTime = 10
fragmentTime = 20 # 앞부분 몇 초를 잘라서 다운받을지
cacheDir = "" # 캐시폴더 디렉토리. 블랭크면 현재위치

###


def processFFMPEG(mediaPath):
    if not cacheDir :
        rootPath = os.getcwd()
    else:
        rootPath = cacheDir
    output = os.path.split(mediaPath)[-1]
    if os.path.exists(output) :
        return
    command = 'ffmpeg -i "' + mediaPath + '" -ss 0 -t ' + str(fragmentTime) + ' -vcodec copy -acodec copy "' + str(os.path.join(rootPath , output)) + '"'
    os.system(command)


if __name__ == '__main__':
    while True:
        res = requests.get(baseurl + '/status/sessions?X-Plex-Token=' + token)
        xml = xmltodict.parse(res.text)['MediaContainer']
        if 'Video' not in xml:
            continue
        if not isinstance(xml['Video'] , list):
            sessions = [xml['Video']]
        else:
            sessions = xml['Video']
        for session in sessions:
            sessionProgress = float(session['@viewOffset'])/ float(session['@duration'])
            if not sessionProgress >= tarProgress: continue
            seasonNumber = session['@parentIndex']
            episodeNumber = session['@index']
            parentKey = session['@parentKey']
            res = requests.get(baseurl + parentKey + '?X-Plex-Token=' + token)
            seasonXml = xmltodict.parse(res.text)['MediaContainer']
            childrenKey=seasonXml['Directory']['@key']
            res = requests.get(baseurl + childrenKey + '?X-Plex-Token=' + token)
            childrenXml = xmltodict.parse(res.text)['MediaContainer']
            for index, child in enumerate(childrenXml['Video']):
                if int(child['@parentIndex']) == int(seasonNumber) and int(child['@index']) == int(episodeNumber):
                    # 다음 에피소드 구한다.
                    nextEpisodeVideo = childrenXml['Video'][index + 1]
                    tarVidPaths = []
                    if isinstance(nextEpisodeVideo['Media'] , list):
                        tarVidPaths = [item['Part']['@file'] for item in nextEpisodeVideo['Media']]
                    else:
                        tarVidPaths = [nextEpisodeVideo['Media']['Part']['@file']]
                    for vidPath in tarVidPaths:
                        processFFMPEG(vidPath)
        time.sleep(intervalTime)
